import torch
import torch.nn as nn
import torch.nn.functional as F


class AReLU(nn.Module):
    def __init__(self, alpha=0.90, beta=2.0):
        super().__init__()
        self.alpha = nn.Parameter(torch.tensor([alpha]), requires_grad=True)
        self.beta = nn.Parameter(torch.tensor([beta]), requires_grad=True)

    def forward(self, input):
        alpha = torch.clamp(self.alpha, min=0.01, max=0.99)
        beta = 1 + torch.sigmoid(self.beta)

        return F.relu(input) * beta - F.relu(-input) * alpha
    

class ELSA(nn.Module):
    def __init__(self, alpha=0.9, beta=2.0, activation=nn.ReLU()):
        super().__init__()
        self.alpha = nn.Parameter(torch.tensor([alpha]), requires_grad=True)
        self.beta = nn.Parameter(torch.tensor([beta]), requires_grad=True)
        self.activation = activation

    def forward(self, x):
        alpha = torch.clamp(self.alpha, min=0.01, max=0.99)
        beta = torch.sigmoid(self.beta)

        x = self.activation(x) + torch.where(x > 0, x * beta, x * alpha)
        return x
    

class MetaAconC(nn.Module):
    r""" ACON activation (activate or not).
    # MetaAconC: (p1*x-p2*x) * sigmoid(beta*(p1*x-p2*x)) + p2*x, beta is generated by a small network
    """

    def __init__(self, width, r=16):
        super().__init__()
        self.fc1 = nn.Conv2d(width, max(r, width // r), kernel_size=1, stride=1, bias=True)
        self.bn1 = nn.BatchNorm2d(max(r, width // r))
        self.fc2 = nn.Conv2d(max(r, width // r), width, kernel_size=1, stride=1, bias=True)
        self.bn2 = nn.BatchNorm2d(width)

        self.p1 = nn.Parameter(torch.randn(1, width, 1, 1))
        self.p2 = nn.Parameter(torch.randn(1, width, 1, 1))

    def forward(self, x):
        beta = F.sigmoid(
            self.bn2(self.fc2(self.bn1(self.fc1(x.mean(dim=2, keepdim=True).mean(dim=3, keepdim=True))))))
        return (self.p1 * x - self.p2 * x) * F.sigmoid(beta * (self.p1 * x - self.p2 * x)) + self.p2 * x